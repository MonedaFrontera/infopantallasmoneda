/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.monedafrontera.jdbc;

import com.monedafrontera.dao.*;
import com.monedafrontera.factory.*;
import java.util.Date;
import com.monedafrontera.dto.*;
import com.monedafrontera.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class TasadebolivaroficinaDaoImpl extends AbstractDAO implements TasadebolivaroficinaDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT fecha, preciobolivar, tipo FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( fecha, preciobolivar, tipo ) VALUES ( ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET fecha = ?, preciobolivar = ?, tipo = ? WHERE fecha = ? AND tipo = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE fecha = ? AND tipo = ?";

	/** 
	 * Index of column fecha
	 */
	protected static final int COLUMN_FECHA = 1;

	/** 
	 * Index of column preciobolivar
	 */
	protected static final int COLUMN_PRECIOBOLIVAR = 2;

	/** 
	 * Index of column tipo
	 */
	protected static final int COLUMN_TIPO = 3;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 3;

	/** 
	 * Index of primary-key column fecha
	 */
	protected static final int PK_COLUMN_FECHA = 1;

	/** 
	 * Index of primary-key column tipo
	 */
	protected static final int PK_COLUMN_TIPO = 2;

	/** 
	 * Inserts a new row in the tasadebolivaroficina table.
	 */
	public TasadebolivaroficinaPk insert(Tasadebolivaroficina dto) throws TasadebolivaroficinaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setTimestamp(index++, dto.getFecha()==null ? null : new java.sql.Timestamp( dto.getFecha().getTime() ) );
			if (dto.isPreciobolivarNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getPreciobolivar() );
			}
		
			stmt.setString( index++, dto.getTipo() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new TasadebolivaroficinaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the tasadebolivaroficina table.
	 */
	public void update(TasadebolivaroficinaPk pk, Tasadebolivaroficina dto) throws TasadebolivaroficinaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setTimestamp(index++, dto.getFecha()==null ? null : new java.sql.Timestamp( dto.getFecha().getTime() ) );
			if (dto.isPreciobolivarNull()) {
				stmt.setNull( index++, java.sql.Types.FLOAT );
			} else {
				stmt.setFloat( index++, dto.getPreciobolivar() );
			}
		
			stmt.setString( index++, dto.getTipo() );
			stmt.setTimestamp(4, pk.getFecha()==null ? null : new java.sql.Timestamp( pk.getFecha().getTime() ) );
			stmt.setString( 5, pk.getTipo() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new TasadebolivaroficinaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the tasadebolivaroficina table.
	 */
	public void delete(TasadebolivaroficinaPk pk) throws TasadebolivaroficinaDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setTimestamp(1, pk.getFecha()==null ? null : new java.sql.Timestamp( pk.getFecha().getTime() ) );
			stmt.setString( 2, pk.getTipo() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new TasadebolivaroficinaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the tasadebolivaroficina table that matches the specified primary-key value.
	 */
	public Tasadebolivaroficina findByPrimaryKey(TasadebolivaroficinaPk pk) throws TasadebolivaroficinaDaoException
	{
		return findByPrimaryKey( pk.getFecha(), pk.getTipo() );
	}

	/** 
	 * Returns all rows from the tasadebolivaroficina table that match the criteria 'fecha = :fecha AND tipo = :tipo'.
	 */
	public Tasadebolivaroficina findByPrimaryKey(Date fecha, String tipo) throws TasadebolivaroficinaDaoException
	{
		Tasadebolivaroficina ret[] = findByDynamicSelect( SQL_SELECT + " WHERE fecha = ? AND tipo = ?", new Object[] { fecha==null ? null : new java.sql.Timestamp( fecha.getTime() ), tipo } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the tasadebolivaroficina table that match the criteria ''.
	 */
	public Tasadebolivaroficina[] findAll() throws TasadebolivaroficinaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY fecha, tipo", null );
	}

	/** 
	 * Returns all rows from the tasadebolivaroficina table that match the criteria 'tipo = :tipo'.
	 */
	public Tasadebolivaroficina[] findWhereTipoEquals(String tipo) throws TasadebolivaroficinaDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE tipo = ? ORDER BY tipo", new Object[] { tipo } );
	}

	/**
	 * Method 'TasadebolivaroficinaDaoImpl'
	 * 
	 */
	public TasadebolivaroficinaDaoImpl()
	{
	}

	/**
	 * Method 'TasadebolivaroficinaDaoImpl'
	 * 
	 * @param userConn
	 */
	public TasadebolivaroficinaDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "public.tasadebolivaroficina";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Tasadebolivaroficina fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Tasadebolivaroficina dto = new Tasadebolivaroficina();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Tasadebolivaroficina[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Tasadebolivaroficina dto = new Tasadebolivaroficina();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Tasadebolivaroficina ret[] = new Tasadebolivaroficina[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Tasadebolivaroficina dto, ResultSet rs) throws SQLException
	{
		dto.setFecha( rs.getTimestamp(COLUMN_FECHA ) );
		dto.setPreciobolivar( rs.getFloat( COLUMN_PRECIOBOLIVAR ) );
		if (rs.wasNull()) {
			dto.setPreciobolivarNull( true );
		}
		
		dto.setTipo( rs.getString( COLUMN_TIPO ) );
	}
        
        
        /**
         * Retorna la ultima tasa de bolivar de ofivina anterior al dia actual
         * para depositos
         * @return 
         */
        public Tasadebolivaroficina getTasaBolivarAnteriorDeposito()
        {
            Tasadebolivaroficina temp = null;
            
            try {
                //el metodo getLastPk obtiene la ultima llave para el mayor 
                //dolar registrado antes al dia actual
                temp = this.findByPrimaryKey( getLastPkDeposito() );
            } catch (TasadebolivaroficinaDaoException e) {
                e.printStackTrace();
            }
            return temp;
        }
        
        
        /**
         * Este metodo retorna la llave primaria de un objeto tasadebolivaroficina
         * para dpositos con para la ultima tasa de dolar al dia actual
         * @return 
         */
        protected TasadebolivaroficinaPk getLastPkDeposito()
        {
            TasadebolivaroficinaPk pk = null;
            
            //obtengo el ultimo dolar anterior al dia actual
            String sql = "SELECT tasadebolivaroficina.tipo, "+
                    "max(tasadebolivaroficina.fecha) as fecha "+
                    "FROM tasadebolivaroficina WHERE "+
                    "tasadebolivaroficina.tipo = 'D' AND "+
                    "tasadebolivaroficina.fecha < CURRENT_DATE "+
                    "GROUP BY tasadebolivaroficina.tipo";

            //hacen parte de la llave primaria
            String tipo = "";
            Date fecha = null;
            // declare variables
            final boolean isConnSupplied = (userConn != null);
            Connection conn = null;
            PreparedStatement stmt = null;
            ResultSet rs = null;

            try {
                conn = isConnSupplied ? userConn : ResourceManager.getConnection();
                final String SQL = sql;
                stmt = conn.prepareStatement(SQL);
                stmt.setMaxRows(maxRows);
                rs = stmt.executeQuery();

                while (rs.next()) {
                    tipo = rs.getString(1);
                    fecha = rs.getDate(2);
                }
                pk = new TasadebolivaroficinaPk( fecha, tipo );//creo el nuevo pk
            } catch (Exception _e) {
                System.out.println("Error al ejecutar la consulta...");
                _e.printStackTrace();
            } finally {//cerrando recursos
                ResourceManager.close(rs);
                ResourceManager.close(stmt);
                if (!isConnSupplied) {
                    ResourceManager.close(conn);
                }
            }
            return pk;
        }

        
        /**
         * Retorna la ultima tasa de bolivar de ofivina anterior al dia actual
         * para depositos
         * @return 
         */
        public Tasadebolivaroficina getTasaBolivarAnteriorTransferencia()
        {
            Tasadebolivaroficina temp = null;
            
            try {
                //el metodo getLastPk obtiene la ultima llave para el mayor 
                //dolar registrado antes al dia actual
                temp = this.findByPrimaryKey( getLastPkTransferencia() );
            } catch (TasadebolivaroficinaDaoException e) {
                e.printStackTrace();
            }
            return temp;
        }
        
        
        /**
         * Este metodo retorna la llave primaria de un objeto tasadebolivaroficina
         * para dpositos con para la ultima tasa de bolivar para transferencia
         * al dia actual
         * @return 
         */
        protected TasadebolivaroficinaPk getLastPkTransferencia()
        {
            TasadebolivaroficinaPk pk = null;
            
            //obtengo el ultimo dolar anterior al dia actual
            String sql = "SELECT tasadebolivaroficina.tipo, "+
                    "max(tasadebolivaroficina.fecha) as fecha "+
                    "FROM tasadebolivaroficina WHERE "+
                    "tasadebolivaroficina.tipo = 'T' AND "+
                    "tasadebolivaroficina.fecha < CURRENT_DATE "+
                    "GROUP BY tasadebolivaroficina.tipo";

            //hacen parte de la llave primaria
            String tipo = "";
            Date fecha = null;
            // declare variables
            final boolean isConnSupplied = (userConn != null);
            Connection conn = null;
            PreparedStatement stmt = null;
            ResultSet rs = null;

            try {
                conn = isConnSupplied ? userConn : ResourceManager.getConnection();
                final String SQL = sql;
                stmt = conn.prepareStatement(SQL);
                stmt.setMaxRows(maxRows);
                rs = stmt.executeQuery();

                while (rs.next()) {
                    tipo = rs.getString(1);
                    fecha = rs.getDate(2);
                }
                pk = new TasadebolivaroficinaPk( fecha, tipo );//creo el nuevo pk
            } catch (Exception _e) {
                System.out.println("Error al ejecutar la consulta...");
                _e.printStackTrace();
            } finally {//cerrando recursos
                ResourceManager.close(rs);
                ResourceManager.close(stmt);
                if (!isConnSupplied) {
                    ResourceManager.close(conn);
                }
            }
            return pk;
        }
        
        /**
         * Retorna la ultima tasa de bolivar de ofivina anterior al dia actual
         * para depositos
         * @return 
         */
        public Tasadebolivaroficina getTasaBolivarAnteriorElectronico()
        {
            Tasadebolivaroficina temp = null;
            
            try {
                //el metodo getLastPk obtiene la ultima llave para el mayor 
                //dolar registrado antes al dia actual
                temp = this.findByPrimaryKey( getLastPkElectronico() );
            } catch (TasadebolivaroficinaDaoException e) {
                e.printStackTrace();
            }
            return temp;
        }
        
        
        /**
         * Este metodo retorna la llave primaria de un objeto tasadebolivaroficina
         * para electronico correspondiente a la ultima tasa del 
         * dia anterior a la fecha actual
         * @return 
         */
        protected TasadebolivaroficinaPk getLastPkElectronico()
        {
            TasadebolivaroficinaPk pk = null;
            
            //obtengo el ultimo dolar anterior al dia actual
            String sql = "SELECT tasadebolivaroficina.tipo, "+
                    "max(tasadebolivaroficina.fecha) as fecha "+
                    "FROM tasadebolivaroficina WHERE "+
                    "tasadebolivaroficina.tipo = 'E' AND "+
                    "tasadebolivaroficina.fecha < CURRENT_DATE "+
                    "GROUP BY tasadebolivaroficina.tipo";

            //hacen parte de la llave primaria
            String tipo = "";
            Date fecha = null;
            // declare variables
            final boolean isConnSupplied = (userConn != null);
            Connection conn = null;
            PreparedStatement stmt = null;
            ResultSet rs = null;

            try {
                conn = isConnSupplied ? userConn : ResourceManager.getConnection();
                final String SQL = sql;
                stmt = conn.prepareStatement(SQL);
                stmt.setMaxRows(maxRows);
                rs = stmt.executeQuery();

                while (rs.next()) {
                    tipo = rs.getString(1);
                    fecha = rs.getDate(2);
                }
                pk = new TasadebolivaroficinaPk( fecha, tipo );//creo el nuevo pk
            } catch (Exception _e) {
                System.out.println("Error al ejecutar la consulta...");
                _e.printStackTrace();
            } finally {//cerrando recursos
                ResourceManager.close(rs);
                ResourceManager.close(stmt);
                if (!isConnSupplied) {
                    ResourceManager.close(conn);
                }
            }
            return pk;
        }
        
	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Tasadebolivaroficina dto)
	{
	}

	/** 
	 * Returns all rows from the tasadebolivaroficina table that match the specified arbitrary SQL statement
	 */
	public Tasadebolivaroficina[] findByDynamicSelect(String sql, Object[] sqlParams) throws TasadebolivaroficinaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
//			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new TasadebolivaroficinaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the tasadebolivaroficina table that match the specified arbitrary SQL statement
	 */
	public Tasadebolivaroficina[] findByDynamicWhere(String sql, Object[] sqlParams) throws TasadebolivaroficinaDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new TasadebolivaroficinaDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
