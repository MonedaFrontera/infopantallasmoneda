/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.monedafrontera.dao;

import com.monedafrontera.dto.*;
import com.monedafrontera.exceptions.*;

public interface DolartodayDao
{
	/** 
	 * Inserts a new row in the dolartoday table.
	 */
	public DolartodayPk insert(Dolartoday dto) throws DolartodayDaoException;

	/** 
	 * Updates a single row in the dolartoday table.
	 */
	public void update(DolartodayPk pk, Dolartoday dto) throws DolartodayDaoException;

	/** 
	 * Deletes a single row in the dolartoday table.
	 */
	public void delete(DolartodayPk pk) throws DolartodayDaoException;

	/** 
	 * Returns the rows from the dolartoday table that matches the specified primary-key value.
	 */
	public Dolartoday findByPrimaryKey(DolartodayPk pk) throws DolartodayDaoException;

	/** 
	 * Returns all rows from the dolartoday table that match the criteria 'epoch = :epoch'.
	 */
	public Dolartoday findByPrimaryKey(long epoch) throws DolartodayDaoException;

	/** 
	 * Returns all rows from the dolartoday table that match the criteria ''.
	 */
	public Dolartoday[] findAll() throws DolartodayDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the dolartoday table that match the specified arbitrary SQL statement
	 */
	public Dolartoday[] findByDynamicSelect(String sql, Object[] sqlParams) throws DolartodayDaoException;

	/** 
	 * Returns all rows from the dolartoday table that match the specified arbitrary SQL statement
	 */
	public Dolartoday[] findByDynamicWhere(String sql, Object[] sqlParams) throws DolartodayDaoException;

}
